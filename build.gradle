plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/emi.accesswidener")
}

repositories {
    maven {
		url = "https://maven.terraformersmc.com/"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	modCompileOnly "com.terraformersmc:modmenu:3.2.3"

	// Run setup-platforms.sh to populate
	modCompileOnly files("platform-1.18.2/build/libs/include.jar")
	// Uncomment for dev
	//modRuntimeOnly files("platform-1.18.2/build/libs/include.jar")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"platform": project.minecraft_version,
				"accessWidener": 'accessWidener'
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

task makePlatformJars(type: Exec) {
	dependsOn remapJar, remapSourcesJar
	commandLine './make-platform-jars.sh', remapJar.archiveFile.get().toString(), remapSourcesJar.archiveFile.get().toString(), project.minecraft_version
}

tasks.build.dependsOn makePlatformJars

// configure the maven publication
publishing {
	publications {
		//def versions = [project.minecraft_version]
		def versions = []

		file('.').list().each {
			if (it.startsWith("platform-")) {
				versions.add(it.substring(9))
			}
		}

		versions.each { plat ->
			create(plat, MavenPublication) {
				group project.group
				artifactId project.archivesBaseName
				version "${project.version}+${plat}"
				artifact(file("build/libs/${project.archivesBaseName}-${project.version}+${plat}.jar")) {
					classifier ''
					builtBy makePlatformJars
				}
				artifact(file("build/libs/${project.archivesBaseName}-${project.version}+${plat}-sources.jar")) {
					classifier 'sources'
					builtBy makePlatformJars
				}
			}
		}
	}
	setupRepositories(repositories);
}

void setupRepositories(RepositoryHandler repositories) {
	if (project.hasProperty("mavenUrl")) {
		repositories.maven {
			url project.mavenUrl
			credentials {
				username project.mavenUsername
				password project.mavenPassword
			}
		}
	}
}
